
step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bbc  08001bbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bc4  08001bc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bc8  08001bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08001bd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001bd8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044f7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e84  00000000  00000000  00024531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  000253b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00025838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f217  00000000  00000000  00025c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004541  00000000  00000000  00034e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005517b  00000000  00000000  00039388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000117c  00000000  00000000  0008e554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001b94 	.word	0x08001b94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001b94 	.word	0x08001b94

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
uint8_t data[10];

uint8_t geschw = 0x01;	// 0x0 bis 0xF

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
	I2C_TypeDef *i2c = I2C1;
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <main+0xd0>)
 80004e0:	603b      	str	r3, [r7, #0]
	BalaHWsetup();
 80004e2:	f000 f94d 	bl	8000780 <BalaHWsetup>
	for(int i = 0; i <10000; i++){;}
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e002      	b.n	80004f2 <main+0x1a>
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80004f8:	4293      	cmp	r3, r2
 80004fa:	ddf7      	ble.n	80004ec <main+0x14>
	stepMotorInit(i2cAddr_StepRight,0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2061      	movs	r0, #97	; 0x61
 8000500:	f000 fbd4 	bl	8000cac <stepMotorInit>
	for(int i = 0; i <10000; i++){;}
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	e002      	b.n	8000510 <main+0x38>
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	3301      	adds	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	f242 720f 	movw	r2, #9999	; 0x270f
 8000516:	4293      	cmp	r3, r2
 8000518:	ddf7      	ble.n	800050a <main+0x32>
	int go_pos = 500;
 800051a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800051e:	60fb      	str	r3, [r7, #12]
	//stepMotorInit(addr,0);
    // Hauptprogramm: Endlosschleife
    while(1)
    {

    	setRotaryColor(LED_GREEN);
 8000520:	2002      	movs	r0, #2
 8000522:	f000 f96d 	bl	8000800 <setRotaryColor>

    	//int ac_pos = getActualPosition(addr); // Auslesen der aktuellen Motorposition
    	setPosition(i2cAddr_StepRight,  go_pos);
 8000526:	68f9      	ldr	r1, [r7, #12]
 8000528:	2061      	movs	r0, #97	; 0x61
 800052a:	f000 fafb 	bl	8000b24 <setPosition>

    	int16_t act_pos = getActualPosition(i2cAddr_StepRight);
 800052e:	2061      	movs	r0, #97	; 0x61
 8000530:	f000 fad8 	bl	8000ae4 <getActualPosition>
 8000534:	4603      	mov	r3, r0
 8000536:	817b      	strh	r3, [r7, #10]
    	while(go_pos != act_pos)
 8000538:	e00f      	b.n	800055a <main+0x82>
    	{
    		act_pos = getActualPosition(i2cAddr_StepRight);
 800053a:	2061      	movs	r0, #97	; 0x61
 800053c:	f000 fad2 	bl	8000ae4 <getActualPosition>
 8000540:	4603      	mov	r3, r0
 8000542:	817b      	strh	r3, [r7, #10]
    		for(int i = 0; i <10000; i++){;}
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e002      	b.n	8000550 <main+0x78>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f242 720f 	movw	r2, #9999	; 0x270f
 8000556:	4293      	cmp	r3, r2
 8000558:	ddf7      	ble.n	800054a <main+0x72>
    	while(go_pos != act_pos)
 800055a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	429a      	cmp	r2, r3
 8000562:	d1ea      	bne.n	800053a <main+0x62>
    	}
    	setRotaryColor(LED_RED);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f94b 	bl	8000800 <setRotaryColor>
    	go_pos += 1000;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000570:	60fb      	str	r3, [r7, #12]
		if(go_pos >= 4000)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000578:	db0d      	blt.n	8000596 <main+0xbe>
				{
					go_pos = -4096;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0xd4>)
 800057c:	60fb      	str	r3, [r7, #12]
					geschw++;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0xd8>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <main+0xd8>)
 8000588:	701a      	strb	r2, [r3, #0]
					setVmax(i2cAddr_StepRight, geschw); // Stetzt die Geschwindigkeit des Steppers
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <main+0xd8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	2061      	movs	r0, #97	; 0x61
 8000592:	f000 fa47 	bl	8000a24 <setVmax>
				}

    	//softStop(addr); 		// Stoppt den Aktuellen Befehl

    	if(geschw == 0xf)
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <main+0xd8>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d1c0      	bne.n	8000520 <main+0x48>
    	{
    		geschw = 0x00;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <main+0xd8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
    {
 80005a4:	e7bc      	b.n	8000520 <main+0x48>
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400
 80005ac:	fffff000 	.word	0xfffff000
 80005b0:	20000000 	.word	0x20000000

080005b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <SystemInit+0x20>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <SystemInit+0x20>)
 80005c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005dc:	f7ff ffea 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000606:	f001 faa1 	bl	8001b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff ff65 	bl	80004d8 <main>

0800060e <LoopForever>:

LoopForever:
  b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   r0, =_estack
 8000610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800061c:	08001bcc 	.word	0x08001bcc
  ldr r2, =_sbss
 8000620:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000624:	20000040 	.word	0x20000040

08000628 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <i2cActivate>:
// Init hardware



void i2cActivate()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <i2cActivate+0xc4>)
 8000634:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 8000636:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <i2cActivate+0xc8>)
 8000638:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <i2cActivate+0xcc>)
 800063c:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f000 ff5e 	bl	8001500 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fc4b 	bl	8000ee0 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 800064a:	2202      	movs	r2, #2
 800064c:	2108      	movs	r1, #8
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fd0c 	bl	800106c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000654:	2204      	movs	r2, #4
 8000656:	2108      	movs	r1, #8
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 fda9 	bl	80011b0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 800065e:	2202      	movs	r2, #2
 8000660:	2109      	movs	r1, #9
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 fd02 	bl	800106c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000668:	2204      	movs	r2, #4
 800066a:	2109      	movs	r1, #9
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 fd9f 	bl	80011b0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000672:	2201      	movs	r2, #1
 8000674:	2108      	movs	r1, #8
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fe03 	bl	8001282 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 800067c:	2201      	movs	r2, #1
 800067e:	2109      	movs	r1, #9
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 fdfe 	bl	8001282 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, I2C_CLOCK_50);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f000 ffea 	bl	8001664 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f001 f8f9 	bl	8001888 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f000 ff32 	bl	8001500 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 800069c:	2202      	movs	r2, #2
 800069e:	210a      	movs	r1, #10
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fce3 	bl	800106c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 80006a6:	2204      	movs	r2, #4
 80006a8:	210a      	movs	r1, #10
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 fd80 	bl	80011b0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 80006b0:	2202      	movs	r2, #2
 80006b2:	2103      	movs	r1, #3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 fcd9 	bl	800106c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 80006ba:	2209      	movs	r2, #9
 80006bc:	2103      	movs	r1, #3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 fd76 	bl	80011b0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 80006c4:	2201      	movs	r2, #1
 80006c6:	210a      	movs	r1, #10
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fdda 	bl	8001282 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 80006ce:	2201      	movs	r2, #1
 80006d0:	2103      	movs	r1, #3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fdd5 	bl	8001282 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, I2C_CLOCK_50);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f000 ffc1 	bl	8001664 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f001 f8d0 	bl	8001888 <i2cEnableDevice>
#endif /* BALA2024 */
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40005800 	.word	0x40005800
 80006f8:	40020400 	.word	0x40020400

080006fc <ledActivate>:




void ledActivate(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8000700:	481e      	ldr	r0, [pc, #120]	; (800077c <ledActivate+0x80>)
 8000702:	f000 fc4f 	bl	8000fa4 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8000706:	2201      	movs	r2, #1
 8000708:	210f      	movs	r1, #15
 800070a:	481c      	ldr	r0, [pc, #112]	; (800077c <ledActivate+0x80>)
 800070c:	f000 fcae 	bl	800106c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8000710:	2200      	movs	r2, #0
 8000712:	210f      	movs	r1, #15
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <ledActivate+0x80>)
 8000716:	f000 fdb4 	bl	8001282 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800071a:	2201      	movs	r2, #1
 800071c:	210f      	movs	r1, #15
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <ledActivate+0x80>)
 8000720:	f000 fdf8 	bl	8001314 <gpioSelectPushPullMode>
    LED_red_off;
 8000724:	210f      	movs	r1, #15
 8000726:	4815      	ldr	r0, [pc, #84]	; (800077c <ledActivate+0x80>)
 8000728:	f000 fceb 	bl	8001102 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 800072c:	2201      	movs	r2, #1
 800072e:	210e      	movs	r1, #14
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <ledActivate+0x80>)
 8000732:	f000 fc9b 	bl	800106c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8000736:	2200      	movs	r2, #0
 8000738:	210e      	movs	r1, #14
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <ledActivate+0x80>)
 800073c:	f000 fda1 	bl	8001282 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8000740:	2201      	movs	r2, #1
 8000742:	210e      	movs	r1, #14
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <ledActivate+0x80>)
 8000746:	f000 fde5 	bl	8001314 <gpioSelectPushPullMode>
    LED_green_off;
 800074a:	210e      	movs	r1, #14
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <ledActivate+0x80>)
 800074e:	f000 fcd8 	bl	8001102 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8000752:	2201      	movs	r2, #1
 8000754:	210d      	movs	r1, #13
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <ledActivate+0x80>)
 8000758:	f000 fc88 	bl	800106c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 800075c:	2200      	movs	r2, #0
 800075e:	210d      	movs	r1, #13
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <ledActivate+0x80>)
 8000762:	f000 fd8e 	bl	8001282 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8000766:	2201      	movs	r2, #1
 8000768:	210d      	movs	r1, #13
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <ledActivate+0x80>)
 800076c:	f000 fdd2 	bl	8001314 <gpioSelectPushPullMode>
    LED_blue_off;
 8000770:	210d      	movs	r1, #13
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <ledActivate+0x80>)
 8000774:	f000 fcc5 	bl	8001102 <gpioSetPin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40020400 	.word	0x40020400

08000780 <BalaHWsetup>:




void BalaHWsetup(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8000784:	f7ff ffba 	bl	80006fc <ledActivate>
   i2cActivate();
 8000788:	f7ff ff50 	bl	800062c <i2cActivate>

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <initRotaryPushButtonLED+0x5c>)
 8000796:	f000 fba3 	bl	8000ee0 <gpioInitPort>
	gpioInitPort(GPIOB);
 800079a:	4815      	ldr	r0, [pc, #84]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 800079c:	f000 fba0 	bl	8000ee0 <gpioInitPort>
	gpioInitPort(GPIOC);
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <initRotaryPushButtonLED+0x64>)
 80007a2:	f000 fb9d 	bl	8000ee0 <gpioInitPort>
	gpioInitPort(GPIOD);
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <initRotaryPushButtonLED+0x68>)
 80007a8:	f000 fb9a 	bl	8000ee0 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 80007ac:	2201      	movs	r2, #1
 80007ae:	210f      	movs	r1, #15
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007b2:	f000 fc5b 	bl	800106c <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 80007b6:	2201      	movs	r2, #1
 80007b8:	210e      	movs	r1, #14
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007bc:	f000 fc56 	bl	800106c <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80007c0:	2201      	movs	r2, #1
 80007c2:	210d      	movs	r1, #13
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007c6:	f000 fc51 	bl	800106c <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80007ca:	210f      	movs	r1, #15
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007ce:	f000 fc98 	bl	8001102 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80007d2:	210e      	movs	r1, #14
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007d6:	f000 fc94 	bl	8001102 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 80007da:	210d      	movs	r1, #13
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <initRotaryPushButtonLED+0x60>)
 80007de:	f000 fc90 	bl	8001102 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <initRotaryPushButtonLED+0x6c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	2000002d 	.word	0x2000002d

08000800 <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 800080a:	4b45      	ldr	r3, [pc, #276]	; (8000920 <setRotaryColor+0x120>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 8000818:	f7ff ffba 	bl	8000790 <initRotaryPushButtonLED>
	}

	switch(color)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b07      	cmp	r3, #7
 8000820:	d87a      	bhi.n	8000918 <setRotaryColor+0x118>
 8000822:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <setRotaryColor+0x28>)
 8000824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000828:	08000849 	.word	0x08000849
 800082c:	08000863 	.word	0x08000863
 8000830:	0800087d 	.word	0x0800087d
 8000834:	08000897 	.word	0x08000897
 8000838:	080008b1 	.word	0x080008b1
 800083c:	080008cb 	.word	0x080008cb
 8000840:	080008e5 	.word	0x080008e5
 8000844:	080008ff 	.word	0x080008ff
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 8000848:	210f      	movs	r1, #15
 800084a:	4836      	ldr	r0, [pc, #216]	; (8000924 <setRotaryColor+0x124>)
 800084c:	f000 fc59 	bl	8001102 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 8000850:	210e      	movs	r1, #14
 8000852:	4834      	ldr	r0, [pc, #208]	; (8000924 <setRotaryColor+0x124>)
 8000854:	f000 fc55 	bl	8001102 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8000858:	210d      	movs	r1, #13
 800085a:	4832      	ldr	r0, [pc, #200]	; (8000924 <setRotaryColor+0x124>)
 800085c:	f000 fc51 	bl	8001102 <gpioSetPin>
			break;
 8000860:	e05a      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 8000862:	210f      	movs	r1, #15
 8000864:	482f      	ldr	r0, [pc, #188]	; (8000924 <setRotaryColor+0x124>)
 8000866:	f000 fc77 	bl	8001158 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 800086a:	210e      	movs	r1, #14
 800086c:	482d      	ldr	r0, [pc, #180]	; (8000924 <setRotaryColor+0x124>)
 800086e:	f000 fc48 	bl	8001102 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8000872:	210d      	movs	r1, #13
 8000874:	482b      	ldr	r0, [pc, #172]	; (8000924 <setRotaryColor+0x124>)
 8000876:	f000 fc44 	bl	8001102 <gpioSetPin>
			break;
 800087a:	e04d      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 800087c:	210f      	movs	r1, #15
 800087e:	4829      	ldr	r0, [pc, #164]	; (8000924 <setRotaryColor+0x124>)
 8000880:	f000 fc3f 	bl	8001102 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8000884:	210e      	movs	r1, #14
 8000886:	4827      	ldr	r0, [pc, #156]	; (8000924 <setRotaryColor+0x124>)
 8000888:	f000 fc66 	bl	8001158 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 800088c:	210d      	movs	r1, #13
 800088e:	4825      	ldr	r0, [pc, #148]	; (8000924 <setRotaryColor+0x124>)
 8000890:	f000 fc37 	bl	8001102 <gpioSetPin>
			break;
 8000894:	e040      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 8000896:	210f      	movs	r1, #15
 8000898:	4822      	ldr	r0, [pc, #136]	; (8000924 <setRotaryColor+0x124>)
 800089a:	f000 fc32 	bl	8001102 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 800089e:	210e      	movs	r1, #14
 80008a0:	4820      	ldr	r0, [pc, #128]	; (8000924 <setRotaryColor+0x124>)
 80008a2:	f000 fc2e 	bl	8001102 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80008a6:	210d      	movs	r1, #13
 80008a8:	481e      	ldr	r0, [pc, #120]	; (8000924 <setRotaryColor+0x124>)
 80008aa:	f000 fc55 	bl	8001158 <gpioResetPin>
			break;
 80008ae:	e033      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 80008b0:	210f      	movs	r1, #15
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <setRotaryColor+0x124>)
 80008b4:	f000 fc50 	bl	8001158 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 80008b8:	210e      	movs	r1, #14
 80008ba:	481a      	ldr	r0, [pc, #104]	; (8000924 <setRotaryColor+0x124>)
 80008bc:	f000 fc21 	bl	8001102 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80008c0:	210d      	movs	r1, #13
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <setRotaryColor+0x124>)
 80008c4:	f000 fc48 	bl	8001158 <gpioResetPin>
			break;
 80008c8:	e026      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 80008ca:	210f      	movs	r1, #15
 80008cc:	4815      	ldr	r0, [pc, #84]	; (8000924 <setRotaryColor+0x124>)
 80008ce:	f000 fc18 	bl	8001102 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 80008d2:	210e      	movs	r1, #14
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <setRotaryColor+0x124>)
 80008d6:	f000 fc3f 	bl	8001158 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 80008da:	210d      	movs	r1, #13
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <setRotaryColor+0x124>)
 80008de:	f000 fc3b 	bl	8001158 <gpioResetPin>
			break;
 80008e2:	e019      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 80008e4:	210f      	movs	r1, #15
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <setRotaryColor+0x124>)
 80008e8:	f000 fc36 	bl	8001158 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 80008ec:	210e      	movs	r1, #14
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <setRotaryColor+0x124>)
 80008f0:	f000 fc32 	bl	8001158 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 80008f4:	210d      	movs	r1, #13
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <setRotaryColor+0x124>)
 80008f8:	f000 fc03 	bl	8001102 <gpioSetPin>
			break;
 80008fc:	e00c      	b.n	8000918 <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 80008fe:	210f      	movs	r1, #15
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <setRotaryColor+0x124>)
 8000902:	f000 fc29 	bl	8001158 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8000906:	210e      	movs	r1, #14
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <setRotaryColor+0x124>)
 800090a:	f000 fc25 	bl	8001158 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 800090e:	210d      	movs	r1, #13
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <setRotaryColor+0x124>)
 8000912:	f000 fc21 	bl	8001158 <gpioResetPin>
			break;
 8000916:	bf00      	nop
	}
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000002d 	.word	0x2000002d
 8000924:	40020400 	.word	0x40020400

08000928 <EXTI0_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for ROT A.
 *               Checks ROT B and updates the position accordingly.
 */
void ROTARY_A_HANDLER(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 800092c:	2101      	movs	r1, #1
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <EXTI0_IRQHandler+0x44>)
 8000930:	f000 fd4d 	bl	80013ce <gpioGetPinState>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <EXTI0_IRQHandler+0x48>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <EXTI0_IRQHandler+0x48>)
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e004      	b.n	8000950 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <EXTI0_IRQHandler+0x48>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a08      	ldr	r2, [pc, #32]	; (8000970 <EXTI0_IRQHandler+0x48>)
 800094e:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <EXTI0_IRQHandler+0x4c>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <EXTI0_IRQHandler+0x4c>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <EXTI0_IRQHandler+0x4c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6153      	str	r3, [r2, #20]
	}
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020400 	.word	0x40020400
 8000970:	20000028 	.word	0x20000028
 8000974:	40013c00 	.word	0x40013c00

08000978 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <EXTI15_10_IRQHandler+0x2c>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <EXTI15_10_IRQHandler+0x30>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <EXTI15_10_IRQHandler+0x30>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <EXTI15_10_IRQHandler+0x30>)
 8000994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000998:	6153      	str	r3, [r2, #20]
	}
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	40013c00 	.word	0x40013c00

080009ac <getFullStatus1>:
 * read the data of the first system register of the stepper
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void getFullStatus1(uint8_t addr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x81;
 80009b6:	2381      	movs	r3, #129	; 0x81
 80009b8:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <getFullStatus1+0x34>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	f107 020f 	add.w	r2, r7, #15
 80009c2:	79f9      	ldrb	r1, [r7, #7]
 80009c4:	2301      	movs	r3, #1
 80009c6:	f000 fe99 	bl	80016fc <i2cBurstWrite>
	i2cBurstRead(i2c, addr, statusReg1, 8);
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <getFullStatus1+0x34>)
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	79f9      	ldrb	r1, [r7, #7]
 80009d0:	2308      	movs	r3, #8
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <getFullStatus1+0x38>)
 80009d4:	f000 feef 	bl	80017b6 <i2cBurstRead>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000030 	.word	0x20000030

080009e8 <getFullStatus2>:
 * read the data of the second system register of the stepper
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void getFullStatus2(uint8_t addr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0xFC;
 80009f2:	23fc      	movs	r3, #252	; 0xfc
 80009f4:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <getFullStatus2+0x34>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 020f 	add.w	r2, r7, #15
 80009fe:	79f9      	ldrb	r1, [r7, #7]
 8000a00:	2301      	movs	r3, #1
 8000a02:	f000 fe7b 	bl	80016fc <i2cBurstWrite>
	i2cBurstRead(i2c, addr, statusReg2, 8);
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <getFullStatus2+0x34>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	79f9      	ldrb	r1, [r7, #7]
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <getFullStatus2+0x38>)
 8000a10:	f000 fed1 	bl	80017b6 <i2cBurstRead>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000038 	.word	0x20000038

08000a24 <setVmax>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param uint8_t vMax - 0x0 .. 0xF --> 0 .. 15/32 (stepper ration), actual speed is depending on the steps (fullstep, halfstep, ...) - for more information view data sheet
 * @returns void
 */
void setVmax (uint8_t addr, uint8_t vMax)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	uint8_t befehl = (uint8_t) 0x89;
 8000a34:	2389      	movs	r3, #137	; 0x89
 8000a36:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorParam[8];
	uint8_t schiebeReg;

	getFullStatus1(addr);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffb6 	bl	80009ac <getFullStatus1>
	getFullStatus2(addr);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffd0 	bl	80009e8 <getFullStatus2>
	MotorParam[0]=befehl;
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	733b      	strb	r3, [r7, #12]
	MotorParam[1]=0xFF;
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	737b      	strb	r3, [r7, #13]
	MotorParam[2]=0xFF;
 8000a50:	23ff      	movs	r3, #255	; 0xff
 8000a52:	73bb      	strb	r3, [r7, #14]
	MotorParam[3]=statusReg1[1];		// x|y x=Irun y=Ihold
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <setVmax+0xb4>)
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	73fb      	strb	r3, [r7, #15]
	MotorParam[4]=statusReg1[2];		// x|y x=Vmax y=Vmin
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <setVmax+0xb4>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	743b      	strb	r3, [r7, #16]

	MotorParam[5]=0b00000000;
 8000a60:	2300      	movs	r3, #0
 8000a62:	747b      	strb	r3, [r7, #17]
	schiebeReg=statusReg2[6];			// xxx|y|zzzz x=SecPosition 10:8 aus StatusReg2
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <setVmax+0xb8>)
 8000a66:	799b      	ldrb	r3, [r3, #6]
 8000a68:	75bb      	strb	r3, [r7, #22]
	schiebeReg<<=5;
 8000a6a:	7dbb      	ldrb	r3, [r7, #22]
 8000a6c:	015b      	lsls	r3, r3, #5
 8000a6e:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]=schiebeReg;
 8000a70:	7dbb      	ldrb	r3, [r7, #22]
 8000a72:	747b      	strb	r3, [r7, #17]

	schiebeReg=statusReg1[3];			// xxx|y|zzzz y=Shaft und z=Acc aus StatusReg1
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <setVmax+0xb4>)
 8000a76:	78db      	ldrb	r3, [r3, #3]
 8000a78:	75bb      	strb	r3, [r7, #22]
	schiebeReg&=0b00011111;
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	75bb      	strb	r3, [r7, #22]
	MotorParam[5]+=schiebeReg;
 8000a82:	7c7a      	ldrb	r2, [r7, #17]
 8000a84:	7dbb      	ldrb	r3, [r7, #22]
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	747b      	strb	r3, [r7, #17]

	MotorParam[6]=statusReg2[5];		// =SecPos(7:0)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <setVmax+0xb8>)
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	74bb      	strb	r3, [r7, #18]

	schiebeReg=statusReg1[3];			// xxx|y|zz|xx  x=N/A y=AccShape z=StepMode
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <setVmax+0xb4>)
 8000a94:	78db      	ldrb	r3, [r3, #3]
 8000a96:	75bb      	strb	r3, [r7, #22]
	schiebeReg>>=3;
 8000a98:	7dbb      	ldrb	r3, [r7, #22]
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	75bb      	strb	r3, [r7, #22]
	MotorParam[7]=schiebeReg;
 8000a9e:	7dbb      	ldrb	r3, [r7, #22]
 8000aa0:	74fb      	strb	r3, [r7, #19]

	schiebeReg=vMax;					// write Vmax into MotorParam value
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	75bb      	strb	r3, [r7, #22]
	schiebeReg<<=4;
 8000aa6:	7dbb      	ldrb	r3, [r7, #22]
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	75bb      	strb	r3, [r7, #22]
	MotorParam[4]&=0b00001111;
 8000aac:	7c3b      	ldrb	r3, [r7, #16]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	743b      	strb	r3, [r7, #16]
	MotorParam[4]+=schiebeReg;
 8000ab6:	7c3a      	ldrb	r2, [r7, #16]
 8000ab8:	7dbb      	ldrb	r3, [r7, #22]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	743b      	strb	r3, [r7, #16]


	i2cBurstWrite(i2c,addr,MotorParam,8);
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <setVmax+0xbc>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	79f9      	ldrb	r1, [r7, #7]
 8000aca:	2308      	movs	r3, #8
 8000acc:	f000 fe16 	bl	80016fc <i2cBurstWrite>
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000030 	.word	0x20000030
 8000adc:	20000038 	.word	0x20000038
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <getActualPosition>:
 *
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns uint16_t 16bit integer `-30000` .. `+30000`
 */
int16_t getActualPosition(uint8_t addr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	int16_t actualPosition;

	getFullStatus2(addr);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff79 	bl	80009e8 <getFullStatus2>
	actualPosition = (int16_t) statusReg2[1];
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <getActualPosition+0x3c>)
 8000af8:	785b      	ldrb	r3, [r3, #1]
 8000afa:	81fb      	strh	r3, [r7, #14]
	actualPosition <<= 8;
 8000afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	81fb      	strh	r3, [r7, #14]
	actualPosition += (int16_t) statusReg2[2];
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <getActualPosition+0x3c>)
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	81fb      	strh	r3, [r7, #14]

	return actualPosition;
 8000b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000038 	.word	0x20000038

08000b24 <setPosition>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param int step - the step the stepper shall go to - for more information view data sheet 
 * @returns void
 */
void setPosition(uint8_t addr, int data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x8B;
 8000b30:	238b      	movs	r3, #139	; 0x8b
 8000b32:	75fb      	strb	r3, [r7, #23]
	uint8_t sendData[5];
	uint32_t Register;
	sendData[0]= befehl;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	723b      	strb	r3, [r7, #8]
	sendData[1]= 0xFF;
 8000b38:	23ff      	movs	r3, #255	; 0xff
 8000b3a:	727b      	strb	r3, [r7, #9]
	sendData[2]= 0xFF;
 8000b3c:	23ff      	movs	r3, #255	; 0xff
 8000b3e:	72bb      	strb	r3, [r7, #10]

	Register = (uint32_t) data;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	613b      	str	r3, [r7, #16]
	Register >>= 8;
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	613b      	str	r3, [r7, #16]
	sendData[3] = (uint8_t) Register;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	72fb      	strb	r3, [r7, #11]

	Register = (uint32_t) data;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	613b      	str	r3, [r7, #16]
	Register &= 0b0000000011111111;
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	613b      	str	r3, [r7, #16]
	sendData[4] = (uint8_t) Register;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	733b      	strb	r3, [r7, #12]

	i2cBurstWrite(i2c,addr, sendData,5);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <setPosition+0x54>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	f000 fdc6 	bl	80016fc <i2cBurstWrite>
}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000008 	.word	0x20000008

08000b7c <initMotorParam>:
 * @param uint8_t addr - 8bit adress of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
static void initMotorParam(uint8_t addr, uint8_t rotdir)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	71bb      	strb	r3, [r7, #6]
	uint8_t befehl = (uint8_t) 0x89;
 8000b8c:	2389      	movs	r3, #137	; 0x89
 8000b8e:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorParam[8];

	MotorParam[0]=befehl;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	733b      	strb	r3, [r7, #12]
	MotorParam[1]=0xFF;
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	737b      	strb	r3, [r7, #13]
	MotorParam[2]=0xFF;
 8000b98:	23ff      	movs	r3, #255	; 0xff
 8000b9a:	73bb      	strb	r3, [r7, #14]
	MotorParam[3]=0b11100111;					// xxxx|yyyy x=Irun y=Ihold
 8000b9c:	23e7      	movs	r3, #231	; 0xe7
 8000b9e:	73fb      	strb	r3, [r7, #15]
	MotorParam[4]=0b11100010;					// xxxx|yyyy x=Vmax y=Vmin
 8000ba0:	23e2      	movs	r3, #226	; 0xe2
 8000ba2:	743b      	strb	r3, [r7, #16]
	if (rotdir == (BOOL) 1)
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d102      	bne.n	8000bb0 <initMotorParam+0x34>
	{
		MotorParam[5]=0b00010011;		// xxx|y|zzzz   x=SecPos(10:8) y=Shaft z=Acc(3:0)
 8000baa:	2313      	movs	r3, #19
 8000bac:	747b      	strb	r3, [r7, #17]
 8000bae:	e001      	b.n	8000bb4 <initMotorParam+0x38>
	}
	else
	{
		MotorParam[5]=0b00000011;		// xxx|y|zzzz   x=SecPos(10:8) y=Shaft z=Acc(3:0)
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	747b      	strb	r3, [r7, #17]
	}
	MotorParam[6]=0b00000000;			// =SecPos(7:0)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	74bb      	strb	r3, [r7, #18]
	MotorParam[7]=0b00001100;			// xxx|y|zz|xx  x=N/A y=AccShape z=StepMode
 8000bb8:	230c      	movs	r3, #12
 8000bba:	74fb      	strb	r3, [r7, #19]
	i2cBurstWrite(i2c,addr,MotorParam,8);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <initMotorParam+0x58>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	79f9      	ldrb	r1, [r7, #7]
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f000 fd98 	bl	80016fc <i2cBurstWrite>
}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <runInit>:
 * @param uint32_t pos1 - the first target step - for more information view data sheet
 * @param uint32_t pos2 - the second target step - for more information view data sheet
 * @returns void
 */
void runInit(uint8_t mot_addr, uint8_t vMax, uint8_t vMin, uint32_t pos1, uint32_t pos2)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4603      	mov	r3, r0
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	460b      	mov	r3, r1
 8000be6:	71bb      	strb	r3, [r7, #6]
 8000be8:	4613      	mov	r3, r2
 8000bea:	717b      	strb	r3, [r7, #5]
	uint8_t befehl = (uint8_t) 0x88;
 8000bec:	2388      	movs	r3, #136	; 0x88
 8000bee:	75fb      	strb	r3, [r7, #23]

	uint32_t Register;
	uint8_t initByte[8];

	initByte[0]=befehl;
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	723b      	strb	r3, [r7, #8]
	initByte[1]=0xFF;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	727b      	strb	r3, [r7, #9]
	initByte[2]=0xFF;
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	72bb      	strb	r3, [r7, #10]
	initByte[3]=vMax;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	72fb      	strb	r3, [r7, #11]
	initByte[3]<<=4;
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	72fb      	strb	r3, [r7, #11]
	initByte[3]+=vMin;
 8000c08:	7afa      	ldrb	r2, [r7, #11]
 8000c0a:	797b      	ldrb	r3, [r7, #5]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	72fb      	strb	r3, [r7, #11]

	Register=pos1;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	613b      	str	r3, [r7, #16]
	Register&=0b1111111100000000;
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c1c:	613b      	str	r3, [r7, #16]
	Register>>=8;
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	613b      	str	r3, [r7, #16]
	initByte[4]=(uint8_t)Register;
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	733b      	strb	r3, [r7, #12]

	Register=pos1;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	613b      	str	r3, [r7, #16]
	Register&=0b0000000011111111;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	613b      	str	r3, [r7, #16]
	initByte[5]=(uint8_t)Register;
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	737b      	strb	r3, [r7, #13]


	Register=pos2;
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	613b      	str	r3, [r7, #16]
	Register&=0b1111111100000000;
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c44:	613b      	str	r3, [r7, #16]
	Register>>=8;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	613b      	str	r3, [r7, #16]
	initByte[6]=(uint8_t)Register;
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	73bb      	strb	r3, [r7, #14]

	Register=pos2;
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	613b      	str	r3, [r7, #16]
	Register&=0b0000000011111111;
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	613b      	str	r3, [r7, #16]
	initByte[7]=(uint8_t)Register;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]

	i2cBurstWrite(i2c,mot_addr, initByte, 8);
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <runInit+0xa4>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f107 0208 	add.w	r2, r7, #8
 8000c6a:	79f9      	ldrb	r1, [r7, #7]
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	f000 fd45 	bl	80016fc <i2cBurstWrite>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <resetPosition>:
 *
 * @param uint8_t addr - 8bit adress of the stepper
 * @returns void
 */
void resetPosition (uint8_t addr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	uint8_t befehl = (uint8_t) 0x86;
 8000c8a:	2386      	movs	r3, #134	; 0x86
 8000c8c:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c,addr, &befehl, 1);
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <resetPosition+0x28>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f107 020f 	add.w	r2, r7, #15
 8000c96:	79f9      	ldrb	r1, [r7, #7]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f000 fd2f 	bl	80016fc <i2cBurstWrite>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <stepMotorInit>:
 * @param uint8_t mot_addr - 8bit adress of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
void stepMotorInit(uint8_t mot_addr, uint8_t rotdir)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
        17,                                     // set rise time: 17 (experience value)
        I2C_CLOCK_400                           // bus clock
        );
*/
	// Init Motor-Params
	getFullStatus1(mot_addr);					// read the first system register of the stepper
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe74 	bl	80009ac <getFullStatus1>
	getFullStatus2(mot_addr); 					// read the second system register of the stepper
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe8e 	bl	80009e8 <getFullStatus2>

	initMotorParam(mot_addr, rotdir);
 8000ccc:	79ba      	ldrb	r2, [r7, #6]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff52 	bl	8000b7c <initMotorParam>
	resetPosition(mot_addr); 					/*
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ffd0 	bl	8000c80 <resetPosition>
												 * reset stepper Position wird auf 0
												 * so that position cannot be the same as that of `runInit(...)`
												 * if the positions are the same --> DEADLOCK!
												 */

	runInit(mot_addr, 0x8,0x5,0x0002,0x0001); 	// go to reference position
 8000ce0:	79f8      	ldrb	r0, [r7, #7]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	2205      	movs	r2, #5
 8000cea:	2108      	movs	r1, #8
 8000cec:	f7ff ff74 	bl	8000bd8 <runInit>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <gpioVerifyPort+0x4c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <gpioVerifyPort+0x38>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <gpioVerifyPort+0x50>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00f      	beq.n	8000d30 <gpioVerifyPort+0x38>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <gpioVerifyPort+0x54>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00b      	beq.n	8000d30 <gpioVerifyPort+0x38>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <gpioVerifyPort+0x58>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <gpioVerifyPort+0x5c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d003      	beq.n	8000d30 <gpioVerifyPort+0x38>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <gpioVerifyPort+0x60>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <gpioVerifyPort+0x3c>
    {
        return true;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <gpioVerifyPort+0x3e>
    }
    return false;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40021c00 	.word	0x40021c00

08000d5c <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02c      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d029      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d026      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d023      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d020      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	d01d      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	d01a      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	d017      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d014      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b09      	cmp	r3, #9
 8000da0:	d011      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d00e      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b0b      	cmp	r3, #11
 8000dac:	d00b      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b0c      	cmp	r3, #12
 8000db2:	d008      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b0d      	cmp	r3, #13
 8000db8:	d005      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b0e      	cmp	r3, #14
 8000dbe:	d002      	beq.n	8000dc6 <gpioVerifyPin+0x6a>
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d101      	bne.n	8000dca <gpioVerifyPin+0x6e>
    {
        return true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <gpioVerifyPin+0x70>
    }
    return false;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d02c      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d029      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d026      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d023      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d020      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d01d      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d01a      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d017      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d014      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	d011      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d00e      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b0b      	cmp	r3, #11
 8000e28:	d00b      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b0c      	cmp	r3, #12
 8000e2e:	d008      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b0d      	cmp	r3, #13
 8000e34:	d005      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b0e      	cmp	r3, #14
 8000e3a:	d002      	beq.n	8000e42 <gpioVerifyAltFunc+0x6a>
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d101      	bne.n	8000e46 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <gpioVerifyPinMode+0x22>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <gpioVerifyPinMode+0x22>
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d002      	beq.n	8000e76 <gpioVerifyPinMode+0x22>
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d101      	bne.n	8000e7a <gpioVerifyPinMode+0x26>
    {
        return true;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <gpioVerifyPinMode+0x28>
    }

    return false;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <gpioVerifyOutputType+0x16>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <gpioVerifyPushPullMode+0x1c>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d002      	beq.n	8000ecc <gpioVerifyPushPullMode+0x1c>
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d101      	bne.n	8000ed0 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff05 	bl	8000cf8 <gpioVerifyPort>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d042      	beq.n	8000f7a <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a24      	ldr	r2, [pc, #144]	; (8000f88 <gpioInitPort+0xa8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d106      	bne.n	8000f0a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <gpioInitPort+0xac>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <gpioInitPort+0xac>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	e035      	b.n	8000f76 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <gpioInitPort+0xb0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d106      	bne.n	8000f20 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <gpioInitPort+0xac>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <gpioInitPort+0xac>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	e02a      	b.n	8000f76 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <gpioInitPort+0xb4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d106      	bne.n	8000f36 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <gpioInitPort+0xac>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <gpioInitPort+0xac>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	e01f      	b.n	8000f76 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <gpioInitPort+0xb8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <gpioInitPort+0xac>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <gpioInitPort+0xac>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	e014      	b.n	8000f76 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <gpioInitPort+0xbc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d106      	bne.n	8000f62 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <gpioInitPort+0xac>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <gpioInitPort+0xac>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	e009      	b.n	8000f76 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <gpioInitPort+0xc0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d105      	bne.n	8000f76 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <gpioInitPort+0xac>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <gpioInitPort+0xac>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e001      	b.n	8000f7e <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40021c00 	.word	0x40021c00

08000fa4 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fea3 	bl	8000cf8 <gpioVerifyPort>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e041      	b.n	8001048 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <gpioSelectPort+0xac>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d106      	bne.n	8000fda <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <gpioSelectPort+0xb0>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <gpioSelectPort+0xb0>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	e035      	b.n	8001046 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <gpioSelectPort+0xb4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d106      	bne.n	8000ff0 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <gpioSelectPort+0xb0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <gpioSelectPort+0xb0>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	e02a      	b.n	8001046 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <gpioSelectPort+0xb8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d106      	bne.n	8001006 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <gpioSelectPort+0xb0>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a15      	ldr	r2, [pc, #84]	; (8001054 <gpioSelectPort+0xb0>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	e01f      	b.n	8001046 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <gpioSelectPort+0xbc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d106      	bne.n	800101c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <gpioSelectPort+0xb0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <gpioSelectPort+0xb0>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	e014      	b.n	8001046 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <gpioSelectPort+0xc0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <gpioSelectPort+0xb0>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <gpioSelectPort+0xb0>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	e009      	b.n	8001046 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <gpioSelectPort+0xc4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d105      	bne.n	8001046 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <gpioSelectPort+0xb0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <gpioSelectPort+0xb0>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020000 	.word	0x40020000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40021c00 	.word	0x40021c00

0800106c <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	4613      	mov	r3, r2
 800107a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fe3b 	bl	8000cf8 <gpioVerifyPort>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e032      	b.n	80010fa <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe60 	bl	8000d5c <gpioVerifyPin>
 800109c:	4603      	mov	r3, r0
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80010a8:	f06f 0301 	mvn.w	r3, #1
 80010ac:	e025      	b.n	80010fa <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 80010ae:	78bb      	ldrb	r3, [r7, #2]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fecf 	bl	8000e54 <gpioVerifyPinMode>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f083 0301 	eor.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80010c2:	f06f 0305 	mvn.w	r3, #5
 80010c6:	e018      	b.n	80010fa <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	0052      	lsls	r2, r2, #1
 80010d0:	2103      	movs	r1, #3
 80010d2:	fa01 f202 	lsl.w	r2, r1, r2
 80010d6:	43d2      	mvns	r2, r2
 80010d8:	401a      	ands	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80010de:	78bb      	ldrb	r3, [r7, #2]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d009      	beq.n	80010f8 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	78b9      	ldrb	r1, [r7, #2]
 80010ea:	78fa      	ldrb	r2, [r7, #3]
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fdf2 	bl	8000cf8 <gpioVerifyPort>
 8001114:	4603      	mov	r3, r0
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	e014      	b.n	8001150 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe17 	bl	8000d5c <gpioVerifyPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 800113a:	f06f 0301 	mvn.w	r3, #1
 800113e:	e007      	b.n	8001150 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2201      	movs	r2, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fdc7 	bl	8000cf8 <gpioVerifyPort>
 800116a:	4603      	mov	r3, r0
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e015      	b.n	80011a8 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fdec 	bl	8000d5c <gpioVerifyPin>
 8001184:	4603      	mov	r3, r0
 8001186:	f083 0301 	eor.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8001190:	f06f 0301 	mvn.w	r3, #1
 8001194:	e008      	b.n	80011a8 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	3310      	adds	r3, #16
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
 80011bc:	4613      	mov	r3, r2
 80011be:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fd99 	bl	8000cf8 <gpioVerifyPort>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f083 0301 	eor.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e050      	b.n	800127a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fdbe 	bl	8000d5c <gpioVerifyPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f083 0301 	eor.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 80011ec:	f06f 0301 	mvn.w	r3, #1
 80011f0:	e043      	b.n	800127a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdef 	bl	8000dd8 <gpioVerifyAltFunc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8001206:	f06f 0302 	mvn.w	r3, #2
 800120a:	e036      	b.n	800127a <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2202      	movs	r2, #2
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff2a 	bl	800106c <gpioSelectPinMode>

	if (pin <= PIN7)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d815      	bhi.n	800124a <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	210f      	movs	r1, #15
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	43d2      	mvns	r2, r2
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	78b9      	ldrb	r1, [r7, #2]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	621a      	str	r2, [r3, #32]
 8001248:	e016      	b.n	8001278 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	3a08      	subs	r2, #8
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	210f      	movs	r1, #15
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	43d2      	mvns	r2, r2
 800125c:	401a      	ands	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	78b9      	ldrb	r1, [r7, #2]
 8001268:	78fa      	ldrb	r2, [r7, #3]
 800126a:	3a08      	subs	r2, #8
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	4613      	mov	r3, r2
 8001290:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fd30 	bl	8000cf8 <gpioVerifyPort>
 8001298:	4603      	mov	r3, r0
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	e030      	b.n	800130c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fd55 	bl	8000d5c <gpioVerifyPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 80012be:	f06f 0301 	mvn.w	r3, #1
 80012c2:	e023      	b.n	800130c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 80012c4:	78bb      	ldrb	r3, [r7, #2]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fdde 	bl	8000e88 <gpioVerifyOutputType>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f083 0301 	eor.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 80012d8:	f06f 0303 	mvn.w	r3, #3
 80012dc:	e016      	b.n	800130c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	43d2      	mvns	r2, r2
 80012ec:	401a      	ands	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 80012f2:	78bb      	ldrb	r3, [r7, #2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
 8001320:	4613      	mov	r3, r2
 8001322:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fce7 	bl	8000cf8 <gpioVerifyPort>
 800132a:	4603      	mov	r3, r0
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e044      	b.n	80013c6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fd0c 	bl	8000d5c <gpioVerifyPin>
 8001344:	4603      	mov	r3, r0
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8001350:	f06f 0301 	mvn.w	r3, #1
 8001354:	e037      	b.n	80013c6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8001356:	78bb      	ldrb	r3, [r7, #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fda9 	bl	8000eb0 <gpioVerifyPushPullMode>
 800135e:	4603      	mov	r3, r0
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 800136a:	f06f 0306 	mvn.w	r3, #6
 800136e:	e02a      	b.n	80013c6 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	2103      	movs	r1, #3
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	43d2      	mvns	r2, r2
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11a      	bne.n	80013c4 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 800138e:	78bb      	ldrb	r3, [r7, #2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10a      	bne.n	80013aa <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	0052      	lsls	r2, r2, #1
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e00c      	b.n	80013c4 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 80013aa:	78bb      	ldrb	r3, [r7, #2]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d109      	bne.n	80013c4 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	0052      	lsls	r2, r2, #1
 80013b8:	2102      	movs	r1, #2
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 800141a:	bf00      	nop
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f9      	beq.n	800141c <__i2c_start+0x16>
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 800144a:	bf00      	nop
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f9      	beq.n	800144c <__i2c_stop+0x16>
 }
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 800146e:	bf00      	nop
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ed      	bne.n	8001470 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 80014aa:	bf00      	nop
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f9      	beq.n	80014ac <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e002      	b.n	80014c4 <__i2c_Chk_TX_empty+0x22>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b13      	cmp	r3, #19
 80014c8:	d9f9      	bls.n	80014be <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <i2cVerifyDutyCycle+0x16>
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <i2cSelectI2C+0x58>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d106      	bne.n	800151e <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <i2cSelectI2C+0x5c>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <i2cSelectI2C+0x5c>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	e014      	b.n	8001548 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <i2cSelectI2C+0x60>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d106      	bne.n	8001534 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <i2cSelectI2C+0x5c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <i2cSelectI2C+0x5c>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	e009      	b.n	8001548 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <i2cSelectI2C+0x64>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d105      	bne.n	8001548 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <i2cSelectI2C+0x5c>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <i2cSelectI2C+0x5c>)
 8001542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	40023800 	.word	0x40023800
 8001560:	40005800 	.word	0x40005800
 8001564:	40005c00 	.word	0x40005c00

08001568 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <i2cSetClkSpd+0x2a>
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d008      	beq.n	8001592 <i2cSetClkSpd+0x2a>
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d005      	beq.n	8001592 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d002      	beq.n	8001592 <i2cSetClkSpd+0x2a>
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d160      	bne.n	8001654 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8001592:	bf00      	nop
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80015ae:	f023 030f 	bic.w	r3, r3, #15
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	61da      	str	r2, [r3, #28]
    	switch (spd)
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d836      	bhi.n	8001636 <i2cSetClkSpd+0xce>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <i2cSetClkSpd+0x68>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e5 	.word	0x080015e5
 80015d4:	080015f3 	.word	0x080015f3
 80015d8:	08001601 	.word	0x08001601
 80015dc:	0800160f 	.word	0x0800160f
 80015e0:	0800161d 	.word	0x0800161d
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	61da      	str	r2, [r3, #28]
				break;
 80015f0:	e02e      	b.n	8001650 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	61da      	str	r2, [r3, #28]
    			break;
 80015fe:	e027      	b.n	8001650 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	61da      	str	r2, [r3, #28]
    				break;
 800160c:	e020      	b.n	8001650 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f043 0214 	orr.w	r2, r3, #20
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	61da      	str	r2, [r3, #28]
    			break;
 800161a:	e019      	b.n	8001650 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	f043 0205 	orr.w	r2, r3, #5
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61da      	str	r2, [r3, #28]
				break;
 8001634:	e00c      	b.n	8001650 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	61da      	str	r2, [r3, #28]
    			break;
 800164e:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e001      	b.n	8001658 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8001654:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, I2C_CLOCKSPEED_t clock)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	4613      	mov	r3, r2
 8001672:	70bb      	strb	r3, [r7, #2]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff2e 	bl	80014d8 <i2cVerifyDutyCycle>
 800167c:	4603      	mov	r3, r0
 800167e:	f083 0301 	eor.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <i2cInitI2C+0x2a>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8001688:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800168c:	e02f      	b.n	80016ee <i2cInitI2C+0x8a>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001694:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0201 	bic.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 80016a8:	f000 fa2e 	bl	8001b08 <rccGetPclk1Freq>
 80016ac:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <i2cInitI2C+0x94>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9a      	lsrs	r2, r3, #18
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2211      	movs	r2, #17
 80016c0:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 80016d6:	78bb      	ldrb	r3, [r7, #2]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff44 	bl	8001568 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	431bde83 	.word	0x431bde83

080016fc <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	461a      	mov	r2, r3
 8001708:	460b      	mov	r3, r1
 800170a:	72fb      	strb	r3, [r7, #11]
 800170c:	4613      	mov	r3, r2
 800170e:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 8001714:	bf00      	nop
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fe69 	bl	8001406 <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8001734:	bf00      	nop
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f9      	beq.n	8001736 <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800174c:	bf00      	nop
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f9      	beq.n	800174e <i2cBurstWrite+0x52>

    while (numBytes < len)
 800175a:	e016      	b.n	800178a <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fea0 	bl	80014a2 <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fe7f 	bl	8001466 <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8001776:	bf00      	nop
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f9      	beq.n	8001778 <i2cBurstWrite+0x7c>

        numBytes++;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	3301      	adds	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 800178a:	7dfa      	ldrb	r2, [r7, #23]
 800178c:	7abb      	ldrb	r3, [r7, #10]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3e4      	bcc.n	800175c <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8001792:	bf00      	nop
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f9      	beq.n	8001794 <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fe60 	bl	8001466 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff fe45 	bl	8001436 <__i2c_stop>

    return I2C_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <i2cBurstRead>:

    return I2C_OK;
}

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	461a      	mov	r2, r3
 80017c2:	460b      	mov	r3, r1
 80017c4:	72fb      	strb	r3, [r7, #11]
 80017c6:	4613      	mov	r3, r2
 80017c8:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 80017ca:	bf00      	nop
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f9      	bne.n	80017cc <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff fe0e 	bl	8001406 <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 80017f8:	bf00      	nop
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f9      	beq.n	80017fa <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fe2d 	bl	8001466 <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8001818:	e02e      	b.n	8001878 <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 800181a:	7abb      	ldrb	r3, [r7, #10]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d11a      	bne.n	8001856 <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fe1a 	bl	8001466 <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff fdff 	bl	8001436 <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8001838:	bf00      	nop
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6919      	ldr	r1, [r3, #16]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
            break;
 8001854:	e013      	b.n	800187e <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8001856:	bf00      	nop
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f9      	beq.n	8001858 <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	b2ca      	uxtb	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
            num--;
 8001872:	7abb      	ldrb	r3, [r7, #10]
 8001874:	3b01      	subs	r3, #1
 8001876:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 8001878:	7abb      	ldrb	r3, [r7, #10]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1cd      	bne.n	800181a <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b094      	sub	sp, #80	; 0x50
 80018b2:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b79      	ldr	r3, [pc, #484]	; (8001aac <rccGetSysClock+0x200>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <rccGetSysClock+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80e1 	bhi.w	8001a98 <rccGetSysClock+0x1ec>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <rccGetSysClock+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <rccGetSysClock+0x3a>
 80018de:	e0db      	b.n	8001a98 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80018e0:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <rccGetSysClock+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80018e4:	e0db      	b.n	8001a9e <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <rccGetSysClock+0x208>)
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80018ea:	e0d8      	b.n	8001a9e <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <rccGetSysClock+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018f6:	4b6d      	ldr	r3, [pc, #436]	; (8001aac <rccGetSysClock+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <rccGetSysClock+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
 800190c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800190e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800191e:	4622      	mov	r2, r4
 8001920:	462b      	mov	r3, r5
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0159      	lsls	r1, r3, #5
 800192c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001930:	0150      	lsls	r0, r2, #5
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4621      	mov	r1, r4
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	6139      	str	r1, [r7, #16]
 800193c:	4629      	mov	r1, r5
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001950:	4659      	mov	r1, fp
 8001952:	018b      	lsls	r3, r1, #6
 8001954:	4651      	mov	r1, sl
 8001956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195a:	4651      	mov	r1, sl
 800195c:	018a      	lsls	r2, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	ebb2 0801 	subs.w	r8, r2, r1
 8001964:	4659      	mov	r1, fp
 8001966:	eb63 0901 	sbc.w	r9, r3, r1
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800197e:	4690      	mov	r8, r2
 8001980:	4699      	mov	r9, r3
 8001982:	4623      	mov	r3, r4
 8001984:	eb18 0303 	adds.w	r3, r8, r3
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	462b      	mov	r3, r5
 800198c:	eb49 0303 	adc.w	r3, r9, r3
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800199e:	4629      	mov	r1, r5
 80019a0:	024b      	lsls	r3, r1, #9
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a8:	4621      	mov	r1, r4
 80019aa:	024a      	lsls	r2, r1, #9
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2200      	movs	r2, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019bc:	f7fe fc0a 	bl	80001d4 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80019c4:	4613      	mov	r3, r2
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c8:	e058      	b.n	8001a7c <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <rccGetSysClock+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	4611      	mov	r1, r2
 80019d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0159      	lsls	r1, r3, #5
 80019f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f6:	0150      	lsls	r0, r2, #5
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4641      	mov	r1, r8
 80019fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a02:	4649      	mov	r1, r9
 8001a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a20:	eb63 050b 	sbc.w	r5, r3, fp
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	00eb      	lsls	r3, r5, #3
 8001a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a32:	00e2      	lsls	r2, r4, #3
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4643      	mov	r3, r8
 8001a3a:	18e3      	adds	r3, r4, r3
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	464b      	mov	r3, r9
 8001a40:	eb45 0303 	adc.w	r3, r5, r3
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a52:	4629      	mov	r1, r5
 8001a54:	028b      	lsls	r3, r1, #10
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	028a      	lsls	r2, r1, #10
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	61fa      	str	r2, [r7, #28]
 8001a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a70:	f7fe fbb0 	bl	80001d4 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <rccGetSysClock+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8001a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8001a96:	e002      	b.n	8001a9e <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <rccGetSysClock+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8001a9c:	bf00      	nop
    }

    return sysClock;
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3750      	adds	r7, #80	; 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8001abe:	f7ff fef5 	bl	80018ac <rccGetSysClock>
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <rccGetHclkFreq+0x44>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001acc:	22f0      	movs	r2, #240	; 0xf0
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	40d3      	lsrs	r3, r2
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <rccGetHclkFreq+0x48>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <rccGetHclkFreq+0x4c>)
 8001aec:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <rccGetHclkFreq+0x4c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08001bac 	.word	0x08001bac
 8001b04:	20000004 	.word	0x20000004

08001b08 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001b0e:	f7ff ffd3 	bl	8001ab8 <rccGetHclkFreq>
 8001b12:	4601      	mov	r1, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <rccGetPclk1Freq+0x3c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b1c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	603a      	str	r2, [r7, #0]
  return result;
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	40d3      	lsrs	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <rccGetPclk1Freq+0x40>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08001bac 	.word	0x08001bac

08001b4c <__libc_init_array>:
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	4d0d      	ldr	r5, [pc, #52]	; (8001b84 <__libc_init_array+0x38>)
 8001b50:	4c0d      	ldr	r4, [pc, #52]	; (8001b88 <__libc_init_array+0x3c>)
 8001b52:	1b64      	subs	r4, r4, r5
 8001b54:	10a4      	asrs	r4, r4, #2
 8001b56:	2600      	movs	r6, #0
 8001b58:	42a6      	cmp	r6, r4
 8001b5a:	d109      	bne.n	8001b70 <__libc_init_array+0x24>
 8001b5c:	4d0b      	ldr	r5, [pc, #44]	; (8001b8c <__libc_init_array+0x40>)
 8001b5e:	4c0c      	ldr	r4, [pc, #48]	; (8001b90 <__libc_init_array+0x44>)
 8001b60:	f000 f818 	bl	8001b94 <_init>
 8001b64:	1b64      	subs	r4, r4, r5
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	2600      	movs	r6, #0
 8001b6a:	42a6      	cmp	r6, r4
 8001b6c:	d105      	bne.n	8001b7a <__libc_init_array+0x2e>
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b74:	4798      	blx	r3
 8001b76:	3601      	adds	r6, #1
 8001b78:	e7ee      	b.n	8001b58 <__libc_init_array+0xc>
 8001b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b7e:	4798      	blx	r3
 8001b80:	3601      	adds	r6, #1
 8001b82:	e7f2      	b.n	8001b6a <__libc_init_array+0x1e>
 8001b84:	08001bc4 	.word	0x08001bc4
 8001b88:	08001bc4 	.word	0x08001bc4
 8001b8c:	08001bc4 	.word	0x08001bc4
 8001b90:	08001bc8 	.word	0x08001bc8

08001b94 <_init>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr

08001ba0 <_fini>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr
